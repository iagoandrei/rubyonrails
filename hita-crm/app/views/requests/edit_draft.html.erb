<%= render partial: 'shared/main_upper_section', locals: { current_main_section: 'proposals' } %>

<div class="proposals-main-page">
  <div class="proposals-main-container container">
    <div class="columns">
      <div class="column is-2">
        <%= render partial: 'shared/main_sidebar', locals: { main_page: 'proposals', current_page: 'drafts' } %>
      </div>
      <div class="column is-10">
        <div id="proposalContainer" class="new-proposal-container">
          <div id="errorMessage" class="container margin-bottom-10" style="display: none">
            <div class="columns">
              <div class="column is-full">
                <p class="alert danger">Existem erros no formulário. Corrija-os e tente novamente.</p>
              </div>
            </div>
          </div>

          <div class="container margin-bottom-10">
            <div class="columns">
              <div class="column is-full">
                <p class="alert success">Você esta na edição de rascunho. Tenha em mente que os valores dos produtos podem mudar com tempo.</p>
              </div>
            </div>
          </div>

          <div class="default-box">
            <div class="columns is-variable is-2">
              <div class="column is-half">
                <div>Nome da Empresa</div>
                <input id="enterpriseNameInput" class="input enterprise-auto-complete" type="text" name="proposal[enterprise_id]" value="<%= @request.enterprise.name %>" disabled>
              </div>
              <div class="column is-narrow">
                <div>Contato</div>
                <div class="select">
                  <%= select_tag "collaborator[status]", options_for_select(@collaborators, @request.collaborator_id), prompt: "Selecione um contato", class: "select", id: 'collaboratorSelect' %>
                </div>
              </div>
            </div>
          </div>
          <div class="default-box">
            <div class="columns">
              <div class="column is-3">Esta proposta é do tipo:</div>
              <div class="column">
                <div class="radio-buttons">
                  <label class="<%= 'selected' if @request.request_type == 'product' %>">
                    <input type="radio" name="proposal[proposal_type]" value="product" <%= 'checked' if @request.request_type == 'product' %>>
                    <span></span>
                    Produto
                  </label>
                  <label class="<%= 'selected' if @request.request_type == 'service' %>">
                    <input type="radio" name="proposal[proposal_type]" value="service" <%= 'checked' if @request.request_type == 'service' %>>
                    <span></span>
                    Serviço
                  </label>
                </div>
              </div>
            </div>
          </div>

          <div id="stockReplacementContainer" <%= ("style='display: none'").html_safe if @request.request_type == 'service' %> class="default-box">
            <div class="columns">
              <div class="column is-3">Reposição de estoque?</div>
              <div class="column">
                <div class="radio-buttons">
                  <label class="<%= 'selected' if @request.is_stock_replacement %>">
                    <input type="radio" name="proposal[stock_replacement]" value="true" <%= 'checked' if @request.is_stock_replacement %>>
                    <span></span>
                    Sim
                  </label>
                  <label class="<%= 'selected' if not @request.is_stock_replacement %>">
                    <input type="radio" name="proposal[stock_replacement]" value="false" <%= 'checked' if not @request.is_stock_replacement %>>
                    <span></span>
                    Não
                  </label>
                </div>
              </div>
            </div>
          </div>

          <div class="default-box equipment-question" <%= ("style='display: none'").html_safe if @request.is_stock_replacement %>>
            <div>Equipamento</div>
            <div class="columns is-variable is-2">
              <div class="column is-half">
                <div class="select">
                  <% if @request.equipment %>
                    <%= select_tag "quiz_select", options_for_select(@avaliable_quizzes, @equipment.id), class: "select" %>
                  <% else %>
                    <%= select_tag "quiz_select", options_for_select(@avaliable_quizzes), prompt: "Selecione o equipamento", class: "select" %>
                  <% end %>
                </div>
              </div>
            </div>
          </div>

          <div class="default-box equipment-formbox margin-bottom-20 hide">
            <div class="columns">
              <div class="column weight-500">
                <div>Descreva as dimensões em (mm) do equipamento seguindo as imagens abaixo:</div>
              </div>
            </div>
              <div class="equipment-images">
              </div>
            <div class="columns is-multiline equipment-inputs">
            </div>
          </div>

          <div class="request-quiz-container">
            <div class="load-messages">
              <div id="loadingMessageContainer" class="default-box hide">
                <div id="loadingMessage" class="columns is-vcentered is-centered">
                  <div class="column is-narrow">
                    <div>Carregando perguntas para solicitação</div>
                    <div class="columns is-centered">
                      <div class="column is-narrow"><div class="loader is-loading"></div></div>
                    </div>
                  </div>
                </div>
              </div>
              <div id="errorMessageContainer" class="default-box hide">
                <div class="columns is-vcentered is-centered">
                  <div class="column is-narrow">
                    <div id="errorMessage">Ocorreu um erro ao buscar as perguntas. Tente novamente.</div>
                  </div>
                </div>
              </div>
            </div>
            <div class="request-quiz-questions"></div>
          </div>

          <div id="requestProducts" class="default-box">
            <div class="columns">
              <div class="column">Deseja adicionar produtos a esse pedido? se sim, clique no botão abaixo e adicione um produto.</div>
            </div>
            <div class="request-products-container">
              <% @request.request_products.each do |product| %>
                <div class="columns request-product" data-shipping-item="product_<%= product.id %>">
                  <div class="column is-5">
                    <div>Produto</div>
                    <div class="select">
                      <%= select_tag "", options_for_select(@product_list, product.product.code), class: "product-select-change-event select" %>
                    </div>
                  </div>
                  <div class="column is-2 remove-on-shipping">
                    <div>Estoque</div>
                    <div class="control">
                      <input class="input stock-input" disabled>
                    </div>
                  </div>
                  <div class="column is-2">
                    <div>Quantidade</div>
                    <input class="input number-input quantity-input" type="number" min="0" value="<%= product.product_quantity.to_f %>">
                  </div>
                  <div class="column is-2 remove-on-shipping">
                    <div>Preço</div>
                    <div class="control">
                      <% if product.price_with_discount %>
                        <input class="input price-input" value='<%= number_to_currency(product.price_with_discount.to_f) %>' disabled>
                      <% else %>
                        <input class="input price-input" value='<%= number_to_currency(product.calculated_price.to_f) %>' disabled>
                      <% end %>
                    </div>
                  </div>
                  <div class="column is-bottom-aligned remove-on-shipping">
                    <button class="button is-danger remove-product-bt"><%= inline_svg "remove.svg", class: "no-margin" %></button>
                  </div>
                </div>
              <% end %>
            </div>
            <div class="columns is-2 total-products-price <%= 'hide' unless @request.request_products.size > 0 %>">
              <div class="column is-2 is-offset-7">
                <div>Quantidade</div>
                <input id="totalQuantityInput" class="input number-input quantity-input" type="number" min="0" value='0' disabled>
              </div>
              <div class="column is-2">
                <div>Subtotal</div>
                <div class="control">
                  <input id="totalProductPriceValue" class="input price-input" value='0' disabled>
                </div>
              </div>
            </div>
            <div class="columns is-2">
              <div class="column has-text-centered">
                <button id="addNewProductButton" class="button is-primary"><%= inline_svg "plus.svg" %> Adicionar produto</button>
              </div>
            </div>
          </div>

          <div class="default-box">
            <div class="columns">
              <div class="column is-one-quarter">Modalidade do frete:</div>
              <div class="column">
                <div class="radio-buttons">
                  <label class="<%= 'selected' if @request.shipping_modality == 'cif' %>">
                    <input type="radio" name="proposal[shipping_modality]" value="cif" <%= 'checked' if @request.shipping_modality == 'cif' %>>
                    <span></span>
                    CIF
                  </label>
                  <label class="<%= 'selected' if @request.shipping_modality == 'fob' %>">
                    <input type="radio" name="proposal[shipping_modality]" value="fob" <%= 'checked' if @request.shipping_modality == 'fob' %>>
                    <span></span>
                    FOB
                  </label>
                </div>
              </div>
            </div>
          </div>

          <div id="shippingOption" class="default-box <%= 'hide' if @request.shipping_modality == 'fob' %>">
            <div class="columns">
              <div class="column is-one-quarter">Escolha a opção de frete:</div>
              <div class="column">
                <div class="radio-buttons">
                  <label class="<%= 'selected' if @request.shipping_type == 'packing' %>">
                    <input type="radio" name="proposal[shipping_type]" value="packing" <%= 'checked' if @request.shipping_type == 'packing' %>>
                    <span></span>
                    Por Embalagem
                  </label>
                  <label class="<%= 'selected' if @request.shipping_type == 'total' %>">
                    <input type="radio" name="proposal[shipping_type]" value="total" <%= 'checked' if @request.shipping_type == 'total' %>>
                    <span></span>
                    Total
                  </label>
                  <label class="<%= 'selected' if @request.shipping_type == 'none' %>">
                    <input id="noShipping" type="radio" name="proposal[shipping_type]" value="none" <%= 'checked' if @request.shipping_type == 'none' %>>
                    <span></span>
                    Não Especificar
                  </label>
                </div>
              </div>
            </div>
            <div class="packing-shipping-container <%= 'hide' unless @request.shipping_type == 'packing' %>">
              <% @request.request_products.each do |product| %>
                <div class="columns request-product" id="product_<%= product.id %>">
                  <div class="column is-5">
                    <div>Produto</div>
                    <div class="select">
                      <%= select_tag "", options_for_select(@product_list, product.product.code), class: "product-select-change-event select", disabled: true %>
                    </div>
                  </div>
                  <div class="column is-2">
                    <div>Quantidade</div>
                    <input class="input number-input quantity-input" type="number" min="0" value="<%= product.product_quantity.to_f %>" disabled>
                  </div>
                  <div class="column is-3">
                    <div>Frete</div>
                    <input class="input shipping-input" type="text" min="0" value="<%= sprintf("%0.02f", product.shipping_price) %>">
                  </div>
                </div>
              <% end %>
            </div>
            <div class="total-shipping-container <%= 'hide' unless @request.shipping_type == 'total' %>">
              <div class="columns">
                <div class="column is-4">
                  <div>Frete</div>
                  <input class="input shipping-input" type="text" value="<%= sprintf("%0.02f", @request.get_total_shipping) %>">
                </div>
              </div>
            </div>
          </div>

          <div id="serviceValueEstimationContainer" class="default-box" <%= ('style="display: none"').html_safe if @request.request_type == 'product' %> >
            <div class="columns">
              <div class="column is-4">
                <div>Estimativa do valor do serviço:</div>
                <input id="serviceValueEstimation" class="input" type="text" autocomplete="off" value="<%= sprintf("%0.02f", @request.value_estimation) %>">
              </div>
            </div>
          </div>

          <div id="responseTimeContainer" class="default-box">
            <div class="columns">
              <div class="column is-4">
                <div>Prazo de resposta:</div>
                <input id="responseTime" class="input" type="text" autocomplete="off" value="<%= @request.response_time&.strftime("%d/%m/%Y") %>">
              </div>
            </div>
          </div>

          <div id="observationContainer" class="default-box">
            <div class="columns">
              <div class="column">
                <div>Observações:</div>
                <textarea id="observationInput" class="textarea textarea-interaction" placeholder="Observações" name="content"><%= @request.observation %></textarea>
              </div>
            </div>
          </div>

          <div class="default-box">
            <div class="columns is-centered is-vcentered">
              <div class="column">
                <div class="margin-bottom-10">Adicione anexos a este pedido:</div>
                <div class="columns is-centered is-vcentered">
                  <div class="column is-9">
                    <div class="other-files margin-top-10">
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="level">
            <div class="level-left"></div>
            <div class="level-right">
              <button id="saveRequestDraftBt" class="button is-secondary is-medium margin-left-15">Salvar Rascunho</button>
              <button id="saveRequestBt" class="button is-secondary is-medium margin-left-15">Solicitar Proposta</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script type="text/javascript">
  var collaborator_id = '<%= @request.collaborator&.id %>'
  var complete_quiz_data = [];
  var product_options_for_select = `<%= options_for_select(@product_list) %>`;
  var uppy_current_request_id = '<%= @request.id %>';
  var attachments = <%= @attachments.to_json.html_safe %>;
  var current_products_prices = <%= @products_prices.to_json.html_safe %>;
  var current_request_products = <%= @request_products.to_json.html_safe %>;
  var product_unique_id = 1;
  var equipment_sizes = <%= @request.equipment_sizes.to_json.html_safe %>;;
  var fluid_list = <%= raw ProposalsHelper::FLUIDS %>;

  var request_data = {
    'request_id': '<%= @request.id %>',
    'request_type': '<%= @request.request_type %>',
    'stock_replacement': <%= @request.is_stock_replacement %>,
    'enterprise_id': <%= @request.enterprise.id %>,
    'collaborator_id': '<%= @request.collaborator&.id %>',
    'shipping_type': '<%= @request.shipping_type %>',
    'equipment_id': '<%= @request.equipment&.id %>'
  };

  $(function() {
    if (request_data.equipment_id &&
      ((request_data.request_type == 'service') || (request_data.request_type == 'product' && request_data.stock_replacement == false))) {

      loadRequestQuiz();
      renderEquipmentForm(request_data['equipment_id']);
      $('.equipment-formbox').removeClass('hide');
    }

    $('#requestProducts .quantity-input').trigger('change');

    $('.show-user-answer').each(function() {
      var question_id = $(this).attr('data-next-question');
      $(this).closest('.isolated-request-quiz').find('div[data-question-id="' + question_id + '"]').show();
    });

    updateTotalProductsValue();
    insertRequestFilesIntoUppy();
  });

  var uppy = Uppy({
    autoProceed: false,
    locale: Brazil_locale,
    restrictions: {
      maxFileSize: 10485760
    }
  })
  .use(Dashboard, {
    target: '.other-files',
    replaceTargetContent: true,
    showProgressDetails: true,
    proudlyDisplayPoweredByUppy: false,
    hideUploadButton: true,
    inline: true,
    note: 'Adicionar outros arquivos à proposta',
    height: 350
  })

  uppy.on('file-added', (file) => {
    uppy.setFileMeta(file.id, {
      request_id: uppy_current_request_id
    })

    uppy.setFileMeta(file.id, {
      authenticity_token: '<%= form_authenticity_token %>'
    })
  });

  uppy.on('complete', (result) => {
    if (request_data['is_draft'])
      window.location = '<%= see_drafts_url %>';
    else if (request_data['request_type'] == 'product')
      window.location = '<%= requests_index_url %>';
    else
      window.location = '<%= services_index_url %>';
  });

  $('#responseTime').datepicker({
    autoHide: true,
    language: 'pt-BR',
    startDate: '<%= Date.today.strftime("%d/%m/%Y") %>'
  }).mask("99/99/9999", {placeholder: 'MM/DD/AAAA' });

  $('#serviceValueEstimation, .price-input').mask('0.000.000.000,00', { reverse: true });

  $('.enterprise-auto-complete').autoComplete({
    minChars: 2,
    source: function(term, response) {
      var xhr;
      var matches = [];
      term = term.toLowerCase();

      try { xhr.abort(); } catch(e) {}
      xhr = $.getJSON('/enterprise_autocomplete', { q: term }, function(data) {

        if (data.length > 0) {
          for (i = 0; i < data.length; i++)
            if (~data[i][0].toLowerCase().indexOf(term)) matches.push(data[i]);
        }// else {
        //  matches.push("Nenhuma empresa encontrada");
        //}

        response(matches);
      });
    },
    renderItem: function (item, search) {
      search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
      return '<div class="autocomplete-suggestion" data-enterprise-id="' + item[1] +'" data-val="' + item[0] + '">'+ item[0].replace(re, "<b>$1</b>") + '</div>';
    },
    onSelect: function(event, term, item) {
      request_data['enterprise_id'] = item.data('enterprise-id');
      updateCollaboratorsSelect(request_data['enterprise_id']);
    }
  });

  $(document).on("click", ".radio-buttons label", function() {
    $(this).parent().find('.selected').removeClass('selected');
    $(this).addClass('selected');
  });

  $(".show-alternative-answer").click(function() {
    $(this).closest('.default-box').children('.alternative-answer').slideDown();
  });

  $(".hide-alternative-answer").click(function() {
    $(this).closest('.default-box').children('.alternative-answer').slideUp();
  });

  $('#collaboratorSelect').change(function() {
    request_data['collaborator_id'] = $(this).val();
  });

  $(".alternative-select-answer").change(function() {
    var $selected = $(this).find(":selected");
    var $alternativeContainer = $(this).closest('.default-box').find('.alternative-answer');

    if ($selected.hasClass('show-alternative')) {
      $alternativeContainer.slideDown(200);
    } else {
      $alternativeContainer.slideUp(200);
    }
  });

  $('[name="proposal[proposal_type]"]').click(function() {
    request_data['request_type'] = $(this).val();

    $('#stockReplacementContainer .selected input').prop('checked', false);
    $('#stockReplacementContainer .selected').removeClass('selected');
    request_data['stock_replacement'] = null;
    request_data['equipment_id'] = null;


    if ($(this).val() == 'service') {
      $('#stockReplacementContainer').slideUp();
      $('.equipment-question').slideDown();
      $('#serviceValueEstimation').closest('.default-box').show('400');
    } else {
      $('#stockReplacementContainer').slideDown();
      $('#serviceValueEstimation').closest('.default-box').hide('400');

      $('.equipment-question').slideUp();
      $('.equipment-images').html('').attr('class', 'equipment-images');
      $('.equipment-inputs').html('');
      $('#quiz_select').val('');
      $quizContainer.html('');
      complete_quiz_data = [];

      if (!$('.equipment-formbox').hasClass('hide')) {
        $('.equipment-formbox').addClass('hide');
      }
    }
  });

  $('[name="proposal[stock_replacement]"]').click(function() {
    request_data['stock_replacement'] = $(this).val() == 'true';

    if ($(this).val() == 'true') {
      $('.equipment-question').slideUp();
      $('.equipment-images').html('').attr('class', 'equipment-images');
      $('.equipment-inputs').html('');
      $('#quiz_select').val('');
      $quizContainer.html('');
      complete_quiz_data = [];

      if (!$('.equipment-formbox').hasClass('hide')) {
        $('.equipment-formbox').addClass('hide');
      }
    } else {
      $('.equipment-question').slideDown();
    }
  });

  $('[name="proposal[shipping_modality]"]').change(function() {
    if ($(this).val() == 'cif') {
      $("#shippingOption").removeClass('hide');
      $("#noShipping").prop('checked', false);
      $("#noShipping").closest('.selected').removeClass('selected');
      request_data['shipping_modality'] = $(this).val();
    } else {
      request_data['shipping_modality'] = $(this).val();
      $("#shippingOption").addClass('hide');
      $("#noShipping").trigger('click');
    }
  });

  $('[name="proposal[shipping_type]"]').change(function() {

    request_data['shipping_type'] = $(this).val();

    if ($(this).val() == 'packing' || $(this).val() == 'none') {
      $('.total-shipping-container .shipping-input').val('');

      if ($(this).val() == 'none') {
        $('.packing-shipping-container').addClass('hide');
      } else {
        $('.packing-shipping-container').removeClass('hide');
      }

      if (!$('.total-shipping-container').hasClass('hide')) {
        $('.total-shipping-container').addClass('hide');
      }
    } else {
      $('.packing-shipping-container .shipping-input').val('');
      $('.total-shipping-container').removeClass('hide');

      if (!$('.packing-shipping-container').hasClass('hide')) {
        $('.packing-shipping-container').addClass('hide');
      }
    }
  });

  $('#addNewProductButton').click(addNewProduct);

  $(document).on('change', '.quantity-input', function() {
    var $current_request_product = $(this).closest('.request-product');

    var code = $current_request_product.find('.product-select-change-event').val();
    var quantity = $current_request_product.find('.quantity-input').val();
    var preco = quantity * current_products_prices[code];

    $current_request_product.find('.price-input').val(preco.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }).replace('R$ ', ''));
    $('#' + $current_request_product.data('shipping-item')).find();

    updateQuantityOnShipping($current_request_product, quantity);
    updateTotalProductsValue();
  });

  function updateQuantityOnShipping($request_product_container, value) {
    $('#' + $request_product_container.data('shipping-item')).find('.quantity-input').val(value);
  }

  function updateTotalProductsValue() {
    var total_price = 0;
    var total_quantity = 0;

    $('.request-products-container .request-product .price-input').each(function() {
      total_price += parseFloat($(this).val().replace(/[R$.]+/g,"").replace(/,/g,'.'));
    });

    $('.request-products-container .request-product .quantity-input').each(function() {
      total_quantity += parseFloat($(this).val());
    });

    $('#totalProductPriceValue').val(total_price.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
    $('#totalQuantityInput').val(total_quantity.toFixed(2));
  }

  $(document).on('change', '.product-select-change-event', checkProductStock);
  $(document).on('change', '.product-select-change-event', getProductPriceByCode);
  $(document).on('change', '.product-select-change-event', addProductToShipping);


  function getProductPriceByCode() {
    var $select = $(this);
    var $product_container = $select.closest('.request-product');
    var product_code = $select.val();

    $product_container.find('.price-input, .quantity-input').val('0');

    $.ajax({
      method: 'GET',
      url: '<%= check_product_price_url %>',
      data: {
        enterprise_id: request_data['enterprise_id'],
        product_code: product_code
      },
      beforeSend: function() {
        $product_container.find('.price-input').parent().addClass('.is-loading');
      },
      success: function(data) {
        $product_container.find('.price-input').parent().removeClass('.is-loading');
        current_products_prices[product_code] = data.price;
        $product_container.find('.quantity-input').prop('disabled', false);

        var new_product = {
          name: $select.find('option:selected').text(),
          code: product_code,
          quantity: null,
          shipping: null
        }
        current_request_products.push(new_product);
      }
    });
  }


  function insertRequestFilesIntoUppy() {
    for (var i = 0; i < attachments.length; i++) {
      let filename = attachments[i][0];

      fetch(attachments[i][1])
      .then((response) => response.blob())
      .then((blob) => {
        uppy.addFile({
          name: filename,
          type: blob.type,
          data: blob
        })
      })
      .then(() => {
        uppy.getFiles().forEach(file => {
          uppy.setFileState(file.id, {
            progress: { uploadComplete: true, uploadStarted: true }
          })
        })
      });
    }
  }

  function addProductToShipping() {
    var $current_request_product = $(this).closest('.request-product');
    var $current_product_on_shipping = $('#' + $current_request_product.data('shipping-item'));

    if ($current_product_on_shipping.length) {
      $current_product_on_shipping.find('select').val($(this).val());
      $current_product_on_shipping.find('.quantity-input').val('0').trigger('change');
    } else {
      var $cloned_list = $current_request_product.clone();
      var $shipping = $('.packing-shipping-container');
      var shipping_input = `
        <div class="column is-3">
          <div>Frete</div>
          <input class="input shipping-input" type="text" min="0">
        </div>
      `;

      $cloned_list.find('.remove-on-shipping').remove();
      $cloned_list.find('.remove-on-shipping').remove();
      $cloned_list.find('select, input').prop('disabled', true);
      $cloned_list.each(function() {
        $(this).append(shipping_input);
        $(this).find('.shipping-input').mask('0.000.000.000,00', { reverse: true });
      });
      $cloned_list.attr('id', $current_request_product.data('shipping-item'));

      $shipping.append($cloned_list);
    }
  }

  function checkProductStock() {
    var $select_input = $(this);
    var code = $select_input.val();
    var $stock_input =  $(this).closest('.request-product').find('.stock-input');

    $.ajax({
      method: 'GET',
      url: '<%= check_product_by_code_url('_code_') %>'.replace("_code_", code),
      beforeSend: function() {
        $stock_input.parent().addClass('is-loading');
        $select_input.prop('disabled', true);
        $stock_input.val('');
      },
      success: function(data) {
        $select_input.prop('disabled', false);
        $stock_input.parent().removeClass('is-loading');
        $stock_input.val(data.stock);
      },
      error: function() {
        $select_input.prop('disabled', false);
        $stock_input.parent().removeClass('is-loading');
        $stock_input.val('Não encontrado');
      }
    })
  };

  function getSelectedProducts() {
    var products = [];

    $('.packing-shipping-container .request-product').each(function() {
      var calculated_product_price = parseInt($(this).find('.number-input').val()) * current_products_prices[$(this).find('.product-select-change-event').val()];

      var id = $(this).prop('id');
      var $price_input = $(`[data-shipping-item="${id}"]`).find('.price-input');
      var inputed_product_price = parseFloat($price_input.val().replace(/[R$.]+/g,"").replace(/,/g,'.'));

      var product = {
        code: $(this).find('.product-select-change-event').val(),
        quantity: $(this).find('.number-input').val(),
        shipping: $(this).find('.shipping-input').val()
      };

      if (calculated_product_price.toFixed(2) != inputed_product_price.toFixed(2)) {
        product['personalized_price'] = inputed_product_price;
      }

      products.push(product);
    });

    return products;
  };

  $('.shipping-input').mask('0.000.000.000,00', { reverse: true });

  function updateCollaboratorsSelect(enterprise_id) {
    $.ajax({
      method: 'GET',
      url: '<%= get_collaborator_by_enterprise_url %>',
      data: {
        enterprise_id: enterprise_id
      },
      beforeSend: function() {
        $('#collaboratorSelect').parent().addClass('is-loading');
        $('#collaboratorSelect').prop('disabled', true);
      },
      success: function(data) {
        var options_str = `<option val="">Selecione um contato</option>`

        for (var i = 0; i < data.length; i++) {
          options_str += `<option value="${data[i][0]}">${data[i][1]}</option>`
        }

        $('#collaboratorSelect').parent().removeClass('is-loading');
        $('#collaboratorSelect').html(options_str);
        $('#collaboratorSelect').prop('disabled', false);
      },
      error: function() {
        $('#collaboratorSelect').parent().removeClass('is-loading');
        $('#collaboratorSelect').html('<option val="">Erro ao carregar contatos</option>');
      }
    });
  }

  function renderTextInput(data) {
    var is_user_answer = false;
    var show_answer = false;

    if (data.user_answers.length > 0 && data.user_answers[0].text != '') {
      is_user_answer = true
      show_answer = true;
    }

    var question =
    `<div class="input-question question-box" data-question-id="${data.id}">
      <div class="columns no-margin-bottom">
        <div class="column weight-500">
          ${data.text}
        </div>
      </div>
      <div class="columns is-variable is-2 ${data.is_optional ? '' : 'required'}" ${data.is_optional ? '' : 'data-question-type="text"'}>
        <div class="column">
          <input class="input request-quiz-input ${ show_answer ? 'show-user-answer' : '' }" type="text" ${data.answers.length ? 'has-next=true' : '' } data-next-question="${data.answers[0] ? data.answers[0].next : '' }" data-answer-id="${data.id}" value="${ is_user_answer ? data.user_answers[0].text : '' }">
        </div>
      </div></div>
    `;

    return question
  }

  function renderButtonInput(data) {
    var question =
    `<div class="button-question question-box" data-question-id="${data.id}">
      <div class="columns no-margin-bottom">
        <div class="column weight-500">${data.text}</div>
      </div>
    `;

    question +=
    ` <div class="columns ${data.is_optional ? '' : 'required'}" ${data.is_optional ? '' : 'data-question-type="button"'}>
        <div class="column">
          <div class="radio-buttons">
    `;

    for (var i = 0; i < data.answers.length; i++) {
      var is_user_answer = false;
      var show_answer = false;

      if (data.user_answers.length > 0 && data.user_answers[0].text == data.answers[i].text) {
        is_user_answer = true;
      }

      if (is_user_answer && data.answers[i].next != '' && !show_answer) {
        show_answer = true;
      }

      question +=
      `
        <label ${data.answers[i].next == '' ? '' : 'has-next=true' } data-next-question="${data.answers[i].next}" data-answer-id="${data.answers[i].id}" class="${ is_user_answer ? 'selected' : '' } ${ show_answer ? 'show-user-answer' : '' }">
          <input type="radio" name="radio_input_${radio_count}" value="${data.answers[i].text}" ${ is_user_answer ? 'checked' : '' }>
          <span></span>
          ${data.answers[i].text}
        </label>
      `;

    }

    question +='</div></div></div></div>';
    radio_count++;
    return question
  }

  function renderSelectInput(data) {
    var show_answer = false;
    var is_user_answer = false;
    var question =
    `<div class="select-question question-box" data-question-id="${data.id}">
      <div class="columns no-margin-bottom">
        <div class="column weight-500">
          ${data.text}
        </div>
      </div>
      <div class="columns ${data.is_optional ? '' : 'required'}" ${data.is_optional ? '' : 'data-question-type="select"'}>
        <div class="column is-two-fifths">
          <div class="select">
            <select class="select request-quiz-select">
    `

    question +='<option value="">Selecione uma opção</option>'
    for (var i = 0; i < data.answers.length; i++) {
      is_user_answer = false;
      show_answer = false;

      if (data.user_answers.length > 0 && data.user_answers[0].text == data.answers[i].text) {
        is_user_answer = true;
      }

      if (is_user_answer && data.answers[i].next != '' && !show_answer) {
        show_answer = true;
      }

      question +=`<option class="${ show_answer ? 'show-user-answer' : '' }" value="${data.answers[i].text}" ${data.answers[i].next == '' ? '' : 'has-next=true' } data-next-question="${data.answers[i].next}" data-answer-id="${data.answers[i].id}" ${ is_user_answer ? 'selected' : '' }>${data.answers[i].text}</option>`
    }

    question +='</select></div></div></div></div>'
    return question
  }


  function renderFluidListInput(data) {
    var show_answer = false;
    var is_user_answer = false;
    var question =
    `<div class="select-question question-box" data-question-id="${data.id}">
      <div class="columns no-margin-bottom">
        <div class="column weight-500">
          ${data.text}
        </div>
      </div>
      <div class="columns ${data.is_optional ? '' : 'required'}" ${data.is_optional ? '' : 'data-question-type="select"'}>
        <div class="column is-two-fifths">
          <div class="select">
            <select class="select request-quiz-select">
    `

    question +='<option value="">Selecione uma opção</option>'

    for (var i = 0; i < fluid_list.length; i++) {
      is_user_answer = false;
      show_answer = false;

      if (data.user_answers.length > 0 && data.user_answers[0].text == fluid_list[i]) {
        is_user_answer = true;
      }

      if (is_user_answer && data.answers[0].next != '' && !show_answer) {
        show_answer = true;
      }

      if (data.answers.length > 0) {
        question +=`<option class="${ show_answer ? 'show-user-answer' : '' }" value="${fluid_list[i]}" ${data.answers[0].next == '' ? '' : 'has-next=true' } data-next-question="${data.answers[0].next}" data-answer-id="${data.answers[0].id}" ${ is_user_answer ? 'selected' : '' }>${fluid_list[i]}</option>`
      } else {
        question +=`<option class="${ show_answer ? 'show-user-answer' : '' }" value="${fluid_list[i]}" ${ is_user_answer ? 'selected' : '' }>${fluid_list[i]}</option>`
      }
    }

    question +='</select></div></div></div></div>'
    return question
  }

  function renderCheckboxInput(data) {
    var show_answer = false;
    var is_user_answer = false;

    var question =
    `<div class="checkbox-question question-box" data-question-id="${data.id}">
      <div class="columns is-vcentered">
        <div class="column weight-500">
          <div>${data.text}:</div>
        </div>
      </div>
      <div class="checkboxes-container">
        <div class="columns is-multiline ${data.is_optional ? '' : 'required'}" ${data.is_optional ? '' : 'data-question-type="checkbox"'}>
    `;

    for (var i = 0; i < data.answers.length; i++) {

      is_user_answer = false;
      show_answer = false;
      if (data.user_answers) {
        for (var j = 0; j < data.user_answers.length; j++) {
          if (data.user_answers[j].text == data.answers[i].text) {
            is_user_answer = true;
            break;
          }
        }
      }

      if (is_user_answer && data.answers[i].next != '' && !show_answer) {
        show_answer = true;
      }

      question +=
      `
        <div class="column is-one-third">
          <div class="b-checkbox is-primary">
            <input id="checkbox_${checkbox_count}" class="styled checkbox-has-next ${ show_answer ? 'show-user-answer' : '' }" type="checkbox" ${data.answers[i].next == '' ? '' : 'has-next=true' } data-next-question="${data.answers[i].next}" data-answer-id="${ data.answers[i].id}" ${ is_user_answer ? 'checked' : '' }>
            <label for="checkbox_${checkbox_count}">
              ${data.answers[i].text}
            </label>
          </div>
        </div>
      `;

      checkbox_count++;
    }

    question +='</div></div></div>'
    return question
  }

  function renderFullQuiz(chatbot_data) {
    full_questions = '<div class="default-box isolated-request-quiz">'

    for (var i = 0; i < chatbot_data.questions.length; i++) {
      switch(chatbot_data.questions[i].answerType) {
        case 'text':
          full_questions += renderTextInput(chatbot_data.questions[i]);
          break;
        case 'select':
          full_questions += renderSelectInput(chatbot_data.questions[i]);
          break;
        case 'button':
          full_questions += renderButtonInput(chatbot_data.questions[i]);
          break;
        case 'checkbox':
          full_questions += renderCheckboxInput(chatbot_data.questions[i]);
          break;
        case 'fluid_list':
          full_questions += renderFluidListInput(chatbot_data.questions[i]);
          break;

        default:
          break;
      }
    }

    full_questions += '</div>'
    return full_questions;
  }

  var $quizContainer = $('.request-quiz-questions');
  var radio_count = 1;
  var checkbox_count = 1;

  $('#quiz_select').change(function() {
    var id = $(this).val();

    request_data['equipment_id'] = id;

    if (id) {
      $.ajax({
        url: '<%= get_quiz_data_url %>',
        method: 'GET',
        data: {
          id: id
        },
        beforeSend: function() {
          $quizContainer.html('');
          complete_quiz_data = [];

          $('#loadingMessageContainer').removeClass('hide');
          $('#errorMessageContainer').addClass('hide');
          $('.equipment-formbox').addClass('hide');
        },
        success: function(data) {
          for (var i = 0; i < data.length; i++) {
            var current_request_quiz = JSON.parse(data[i]);
            var result = renderFullQuiz(current_request_quiz);

            complete_quiz_data.push(current_request_quiz);

            $quizContainer.append(result);
            var current_quiz = $quizContainer.children()[i];

            if (current_request_quiz.name.toLowerCase() == 'temperatura') {
              var $input_to_mask = $(current_quiz).find('input');

              $input_to_mask.on('keyup', function(){
                if (!validTemperatureNumber(this.value)) {
                   $(this).val(function(index, value){
                      return value.substr(0, value.length - 1);
                   });
                }
              });
            }

            if (current_request_quiz.name.toLowerCase() == 'pressão') {
              $(current_quiz).find('input').mask('00000,00', { reverse: true });
            }

            if (current_request_quiz.name.toLowerCase() == 'fluido e concentração') {
              $(current_quiz).find('input').mask('000,00 %', { reverse: true });
            }

            $(current_quiz).children().each(function() {
              hideDependentQuestions(this, false);
            });
          }

          renderEquipmentForm(id);
          $('.equipment-formbox').removeClass('hide');
          $('#loadingMessageContainer').addClass('hide');
        },
        error: function() {
          $('#loadingMessageContainer').addClass('hide');
          $('#errorMessageContainer').removeClass('hide');
        }
      });

    }
  });

  function loadRequestQuiz() {
    data = "<%= j(raw(@request.get_request_quiz_data)) %>";
    data = data.replace(/=>/g, ':');
    data = JSON.parse(data);

    for (var i = 0; i < data.length; i++) {
      var current_request_quiz = JSON.parse(data[i]);
      var result = renderFullQuiz(current_request_quiz);

      complete_quiz_data.push(current_request_quiz);

      $quizContainer.append(result);
      var current_quiz = $quizContainer.children()[i];

      if (current_request_quiz.name.toLowerCase() == 'temperatura') {
        var $input_to_mask = $(current_quiz).find('input');

        $input_to_mask.on('keyup', function(){
          if (!validTemperatureNumber(this.value)) {
             $(this).val(function(index, value){
                return value.substr(0, value.length - 1);
             });
          }
        });
      }

      if (current_request_quiz.name.toLowerCase() == 'pressão') {
        $(current_quiz).find('input').mask('00000,00', { reverse: true });
      }

      if (current_request_quiz.name.toLowerCase() == 'fluido e concentração') {
        $(current_quiz).find('input').mask('000,00 %', { reverse: true });
      }

      $(current_quiz).children().each(function() {
        hideDependentQuestions(this, false);
      });
    }
  }

  function renderEquipmentForm(id) {
    $.ajax({
      url: '<%= get_equipment_infos_url %>',
      method: 'GET',
      data: {
        id
      },
      beforeSend: function() {
        $('.equipment-images').html('').attr('class', 'equipment-images');
        $('.equipment-inputs').html('');
      },
      success: function(data) {
        var image_presence_flag = false;
        var inputs_str = '';

        var letter = 'A';
        for (var i = 1; i < data.number_of_inputs + 1; i++) {

          inputs_str += `
            <div class="column is-one-third">
              <div>Medida ${letter}:</div>
              <input class="input equipment-measurements number-input" type="text" value="${ equipment_sizes[i-1] ? equipment_sizes[i-1] : '' }"></input>
            </div>
          `;

          var unicode = letter.charCodeAt(0);
          unicode++;
          letter = String.fromCharCode(unicode);
        }

        $('.equipment-inputs').html(inputs_str);

        if (data.image_1 != '') {
          $('.equipment-images').append(
            `<div>
              <img src="${data.image_1}">
             </div>
            `
          );

          image_presence_flag = true;
        }

        if (data.image_2 != '') {
          $('.equipment-images').append(
            `<div>
              <img src="${data.image_2}">
             </div>
            `
          );

          image_presence_flag = true;
        }

        if (data.image_3 != '') {
          $('.equipment-images').append(
            `<div>
              <img src="${data.image_3}">
             </div>
            `
          );

          image_presence_flag = true;
        }

        if (image_presence_flag) {
          $('.equipment-images').slick({
            dots: true,
            speed: 500
          });
        } else {
          $('.equipment-images')
          .html('Nenhuma imagem foi cadastrada para esse equipamento.')
          .addClass('margin-bottom-10');
        }
      }
    });
  }

  function buildUserAnswers() {
    var $full_quiz = $('.isolated-request-quiz');

    for (var current_quiz = 0; current_quiz < complete_quiz_data.length; current_quiz++) {
      for (var question = 0; question < complete_quiz_data[current_quiz].questions.length; question++) {
        complete_quiz_data[current_quiz]
        .questions[question]
        .user_answers = searchUserAnswers($full_quiz[current_quiz].children[question]);
      }
    }
  }

  function searchUserAnswers(question) {
    let $question_container = $(question);
    let answers = [];

    if ($question_container.hasClass('button-question')) {
      answers.push(getButtonAnswer($question_container));

    } else if ($question_container.hasClass('checkbox-question')) {
      answers = getCheckboxAnswers($question_container);

    } else if ($question_container.hasClass('input-question')) {
      answers.push(getTextAnswer($question_container));

    } else if ($question_container.hasClass('select-question')) {
      answers.push(getSelectAnswer($question_container));
    }

    return answers;
  }

  function getSelectAnswer($question) {
    let $select = $question.find('select.request-quiz-select');
    let answer = {};
    answer['id'] = $select.find(':selected').data('answer-id');
    answer['text'] = $select.val();

    return answer;
  }

  function getTextAnswer($question) {
    let $input = $question.find('input.request-quiz-input');
    let answer = {};
    answer['id'] = $input.data('answer-id');
    answer['text'] = $input.val();

    return answer;
  }

  function getCheckboxAnswers($question) {
    let checked_inputs = $question.find('input:checked');
    let answers = [];

    checked_inputs.each(function() {
      let current_answer = {};
      current_answer['id'] = $(this).data('answer-id');
      current_answer['text'] = $(this).parent().text().trim();
      answers.push(current_answer);
    });

    return answers;
  }

  function getButtonAnswer($question) {
    let $label = $question.find('label.selected');
    let answer = {}
    answer['id'] = $label.data('answer-id');
    answer['text'] = $label.text().trim();

    return answer;
  }

  function getEquipmentMeasures() {
    return $('.equipment-measurements').map(function() { return $(this).val() }).get();
  }

  function hideDependentQuestions(elem, hide_or_not) {
    var $current_quiz_context = $(elem).closest('.isolated-request-quiz');
    already_calculated = [];

    $(elem).find('[has-next="true"]').each(function() {
      if (!already_calculated.includes($(this).data('next-question'))) {
        hideDependentQuestions($current_quiz_context.find('div[data-question-id="' + $(this).data('next-question') + '"]'), true);
        already_calculated.push($(this).data('next-question'));
      }
    });

    if (hide_or_not) {
      $(elem).hide();
    }
  }


  // This function hides and show questions that depends on other answers
  function hideRelatedQuestions(elem) {
    var $current_quiz_context = $(elem).closest('.isolated-request-quiz');
    var $current_question = $current_quiz_context.find('div[data-question-id="' + $(elem).data('next-question') + '"]')
    var $hide_next_questions = $current_question.find('[has-next="true"]');
    var already_calculated = [];

    $hide_next_questions.each(function() {
      if(!already_calculated.includes($(this).data('next-question'))) {
        hideRelatedQuestions(this);
        already_calculated.push($(this).data('next-question'));
      }
    });

    $current_question.hide();
    $current_question.find('input:checked').attr('checked', false);
    $current_question.find('.selected').removeClass('selected');
    $current_question.find('input[type="text"]').val('');
    $current_question.find('select').val('');
    $current_question.find('input[type="checkbox"]').prop('checked', false);
  }

  function stringifyChatbotData(data) {
    new_data = []

    for (var i = 0; i < data.length; i++) {
      new_data.push(JSON.stringify(data[i]));
    }

    return new_data;
  }

  function generateUniqueId() {
    product_unique_id++;
    return `product_number_${product_unique_id}`
  }

  function addNewProduct() {
    if (request_data['enterprise_id']) {
      var product_number = $('.request-products-container').children().length;
      var product_id = generateUniqueId();

      if (product_number == 0) {
        $('.total-products-price').removeClass('hide');
      }

      var product_el = `
        <div class="columns request-product" data-shipping-item="${product_id}">
          <div class="column is-5">
            <div>Produto</div>
            <div class="select">
              <select class="product-select-change-event select">
                <option val="">Selecione o produto</option>
                ${product_options_for_select}
              </select>
            </div>
          </div>
          <div class="column is-2 remove-on-shipping">
            <div>Estoque</div>
            <div class="control">
              <input class="input stock-input" disabled>
            </div>
          </div>
          <div class="column is-2">
            <div>Quantidade</div>
            <input class="input number-input quantity-input" type="number" min="0" value='0' disabled>
          </div>
          <div class="column is-2 remove-on-shipping">
            <div>Preço</div>
            <div class="control">
              <input class="input price-input" value='0' disabled>
            </div>
          </div>
          <div class="column is-bottom-aligned remove-on-shipping">
            <button class="button is-danger remove-product-bt"><%= inline_svg "remove.svg", class: "no-margin" %></button>
          </div>
        </div>`;

      $('.request-products-container').append(product_el);
      $('.request-products-container .price-input').mask('0.000.000.000,00', { reverse: true })
      $('#enterpriseNameInput').removeClass('error-border');
    } else {
      $('#enterpriseNameInput').addClass('error-border');
      scrollToAnchor('#enterpriseNameInput', -50);
    }
  }


  function catchQuizErrors() {
    var error_flag = false;
    var $required_questions = $('.required');

    $required_questions.removeClass('error-border');
    $required_questions.each(function() {

      switch($(this).data('question-type')) {
        case 'text':
          if (catchInputError(this)) {
            $(this).addClass('error-border');
            error_flag = true;
          }
          break;
        case 'select':
          if (catchSelectError(this)) {
            $(this).addClass('error-border');
            error_flag = true;
          }
          break;
        case 'button':
          if (catchButtonError(this)) {
            $(this).addClass('error-border');
            error_flag = true;
          }
          break;
        case 'checkbox':
          if (catchCheckboxError(this)) {
            $(this).addClass('error-border');
            error_flag = true;
          }
          break;
      }
    });

    return error_flag;
  }

  function catchInputError($elem) {
    var $input = $($elem).find('input');

    return ((isEmpty($input.val()) || isBlank($input.val())) && $input.is(':visible'))
  }

  function catchSelectError($elem) {
    var $input = $($elem).find('select');

    return (isBlank($input.val()) && $input.is(':visible'))
  }

  function catchButtonError($elem) {
    var $input = $($elem);
    var selected = $($elem).find('label[class~="selected"]').length;

    return ((selected == 0) && $input.is(':visible'))
  }

  function catchCheckboxError($elem) {
    var $input = $($elem);
    var selected = $($elem).find('input:checked').length;

    return ((selected == 0) && $input.is(':visible'))
  }

  function catchErrors() {
    var error_flag = false;

    if ($('#enterpriseNameInput').val() == '' || !request_data['enterprise_id']) {
      $('#enterpriseNameInput').addClass('error-border');
      error_flag = true;
    } else {
      $('#enterpriseNameInput').removeClass('error-border');
    }

    if ($('#collaboratorSelect').val() == '' || !request_data['collaborator_id']) {
      $('#collaboratorSelect').addClass('error-border');
      error_flag = true;
    } else {
      $('#collaboratorSelect').removeClass('error-border');
    }

    if (!request_data['stock_replacement'] && $('#quiz_select').val() == '') {
      $('#quiz_select').addClass('error-border');
      error_flag = true;
    } else {
      $('#quiz_select').removeClass('error-border');
    }

    if (request_data['stock_replacement'] && $('.request-products-container').children().length == 0) {
      error_flag = true;
      $('#requestProducts').addClass('error-border');
    } else {
      $('#requestProducts').removeClass('error-border');
    }

    if (request_data['shipping_type'] == 'total' && $('.total-shipping-container .shipping-input').val() == '') {
      error_flag = true;
      $('#shippingOption').addClass('error-border');
    } else {
      $('#shippingOption').removeClass('error-border');
    }

    if (request_data['request_type'] == 'service' && $('#serviceValueEstimation').val() == '') {
      error_flag = true;
      $('#serviceValueEstimationContainer').addClass('error-border');
    } else {
      $('#serviceValueEstimationContainer').removeClass('error-border');
    }

    if ($('#responseTime').val() == '') {
      error_flag = true;
      $('#responseTimeContainer').addClass('error-border');
    } else {
      $('#responseTimeContainer').removeClass('error-border');
    }

    return error_flag;
  }

  $('#saveRequestBt').click(function() {
    request_data['total_shipping'] = $('.total-shipping-container .shipping-input').val();
    request_data['response_time'] = $('#responseTime').val();
    request_data['service_value_estimation'] = $('#serviceValueEstimation').val();
    request_data['shipping_modality'] = $('[name="proposal[shipping_modality]"]:checked').val();
    request_data['observations'] = $('#observationInput').val();

    var form_errors = catchErrors();
    var quiz_errors = catchQuizErrors();

    if (!form_errors && !quiz_errors) {
      $('#errorMessage').hide();

      var $button = $(this);
      var equipment_measures = getEquipmentMeasures();
      var products = getSelectedProducts();
      request_data['is_draft'] = false;

      $button.addClass('is-loading');

      buildUserAnswers();
      complete_quiz_data.reverse();

      $.ajax({
        method: 'POST',
        url: '<%= update_request_url %>',
        data: {
          request_data: request_data,
          quiz_data: stringifyChatbotData(complete_quiz_data),
          equipment_measures: equipment_measures,
          products: stringifyChatbotData(products),
          authenticity_token: '<%= form_authenticity_token %>'
        },
        success: function(data) {
          startGeneralFilesUpload();
        }
      });
    } else {
      scrollToAnchor('#proposalContainer', -20);
      $('#errorMessage').show();
    }
  });

  $('#saveRequestDraftBt').click(function() {
    request_data['total_shipping'] = $('.total-shipping-container .shipping-input').val();
    request_data['response_time'] = $('#responseTime').val();
    request_data['service_value_estimation'] = $('#serviceValueEstimation').val();
    request_data['shipping_modality'] = $('[name="proposal[shipping_modality]"]:checked').val();
    request_data['observations'] = $('#observationInput').val();

    if (!catchErrorsForDraft()) {
      $('#errorMessage').hide();

      var $button = $(this);
      var equipment_measures = getEquipmentMeasures();
      var products = getSelectedProducts();

      request_data['is_draft'] = true;

      $button.addClass('is-loading');

      buildUserAnswers();
      complete_quiz_data.reverse();

      $.ajax({
        method: 'POST',
        url: '<%= update_request_url %>',
        data: {
          request_data: request_data,
          quiz_data: stringifyChatbotData(complete_quiz_data),
          equipment_measures: equipment_measures,
          products: stringifyChatbotData(products),
          authenticity_token: '<%= form_authenticity_token %>'
        },
        success: function(data) {
          startGeneralFilesUpload();
        }
      });
    } else {
      $('#errorMessage').show();
      scrollToAnchor('#proposalContainer', -20);
    }
  });

  function catchErrorsForDraft() {
    var error_flag = false;

    if ($('#enterpriseNameInput').val() == '' || !request_data['enterprise_id']) {
      $('#enterpriseNameInput').addClass('error-border');
      error_flag = true;
    } else {
      $('#enterpriseNameInput').removeClass('error-border');
    }

    return error_flag;
  }


  function startGeneralFilesUpload() {
    if (uppy.getFiles().length > 0) {
      uppy.use(XHRUpload, {
        endpoint: '<%= upload_request_file_url %>',
        method: 'POST',
        formData: true,
        fieldName: 'files[]'
      });

      uppy.upload();
    } else {
      if (request_data['is_draft'])
        window.location = '<%= see_drafts_url %>';
      else if (request_data['request_type'] == 'product')
        window.location = '<%= requests_index_url %>';
      else
        window.location = '<%= services_index_url %>';
    }
  }

  $(document).on('click', '.remove-product-bt', function() {
    var product_number = $('.request-products-container').children().length;

    if (product_number == 1) {
      $('.total-products-price').addClass('hide');
    }

    $('#' + $(this).closest('.request-product').data('shipping-item')).remove();
    $(this).closest('.request-product').remove();
    updateTotalProductsValue();
  });

  $('.file-input').change(function(e) {
    var fileName = e.target.files[0].name;
    $(this).parent().find('.file-name').text(fileName);
  });

  // This event hides and show questions that depends on select lists
  $(document).on("change", '.request-quiz-select', function() {
    var $selected = $(this).find(":selected");
    var $elements = $selected.siblings();
    var already_calculated = []

    $elements.each(function() {
      if (!already_calculated.includes($(this).data('next-question'))) {
        hideRelatedQuestions(this);
        already_calculated.push($(this).data('next-question'));
      }
    });

    var $current_quiz_context = $selected.closest('.isolated-request-quiz');
    $current_quiz_context.find('div[data-question-id="' + $selected.data('next-question') + '"]').show();
  });


  // This event hides and show questions that depends on buttons
  $(document).on('click', '.radio-buttons label', function() {
    var $elements = $(this).siblings().not(this);
    $elements.each(function() {
      hideRelatedQuestions(this);
    });

    var $current_quiz_context = $(this).closest('.isolated-request-quiz');
    $current_quiz_context.find('div[data-question-id="' + $(this).data('next-question') + '"]').show();
  });


  // This event hides and show questions that depends on an input answer
  $(document).on('keyup', 'input[has-next="true"]', function() {
    var $elem = $(this);

    if ($elem.val() == '') {
      var $current_quiz_context = $elem.closest('.isolated-request-quiz');
      $current_quiz_context.find('div[data-question-id="' + $elem.data('next-question') + '"]').hide('200');
    } else {
      var $current_quiz_context = $elem.closest('.isolated-request-quiz');
      $current_quiz_context.find('div[data-question-id="' + $elem.data('next-question') + '"]').show('200');
    }
  });


  // This event hides and show questions that depends on checkbox answers
  $(document).on('click', '.checkbox-has-next', function() {
    var $input = $(this);
    var checkbox_value = !$input.is(':checked');
    var $current_quiz_context = $input.closest('.isolated-request-quiz');
    var $next_question = $current_quiz_context.find('div[data-question-id="' + $input.data('next-question') + '"]');
    var question_id = $next_question.data('question-id');
    var current_related_checkeds = $current_quiz_context.find('input[data-next-question=' + question_id +']:checked').length;

    if (!checkbox_value && !$next_question.is(':visible')) {
      $next_question.show('200');
    } else if (checkbox_value && $next_question.is(':visible') && current_related_checkeds == 0) {
      hideRelatedQuestions(this);
      $next_question.hide('200');
    }
  });

</script>
